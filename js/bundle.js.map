{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/main.js","src/js/idm.js","src/js/raf.js","src/js/roadLane.js","src/js/roadNetwork.js","src/js/roadNetworkFactory.js","src/js/roadSegment.js","src/js/vehicle.js"],"names":[],"mappings":"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","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nvar _interopRequire = function (obj) {\n\treturn obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nvar createRingRoad = require(\"./roadNetworkFactory\").createRingRoad;\nvar RoadNetwork = _interopRequire(require(\"./roadNetwork\"));\n\nvar RoadSegment = _interopRequire(require(\"./roadSegment\"));\n\nvar raf = _interopRequire(require(\"./raf\"));\n\n// polyfill requestAnimationFrame\nraf();\n\nvar dt = 0.2;\nvar simulationTime = 0;\nvar iterationCount = 0;\n\nvar running = false;\nvar time = undefined;\nvar timeWarp = 4;\n\n\nvar roadLength = 1000;\nvar numberOfLanes = 1;\nvar roadNetwork = createRingRoad(roadLength, numberOfLanes);\n\ndebugger;\nstart();\n\nfunction start() {\n\trunning = true;\n\ttime = new Date().getTime();\n\tmainLoop();\n}\n\nfunction mainLoop() {\n\tif (running) {\n\t\trequestAnimationFrame(mainLoop);\n\n\t\tvar now = new Date().getTime();\n\t\tdt = (now - (time || now)) / 1000;\n\t\tdt *= timeWarp;\n\t\ttime = now;\n\n\t\t// update state\n\t\tsimulationTime += dt;\n\t\titerationCount++;\n\t\troadNetwork.timeStep(dt);\n\n\t\t// draw\n\n\t\t// limit iterations for now\n\t\tif (iterationCount >= 5) {\n\t\t\trunning = false;\n\t\t}\n\t} else {\n\t\tconsole.log(\"timeStep: \", dt, \" -- simTime: \", simulationTime, \" -- iterationcount: \", iterationCount);\n\t}\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvbW92c2ltLWVzNi9zcmMvanMvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0lBQ0MsY0FBYyxXQUVWLHNCQUFzQixFQUYxQixjQUFjO0lBR1IsV0FBVywyQkFBTSxlQUFlOztJQUNoQyxXQUFXLDJCQUFNLGVBQWU7O0lBQ2hDLEdBQUcsMkJBQU0sT0FBTzs7O0FBR3ZCLEdBQUcsRUFBRSxDQUFDOztBQUVOLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztBQUNiLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztBQUN2QixJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUM7O0FBRXZCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztBQUNwQixJQUFJLElBQUksWUFBQSxDQUFDO0FBQ1QsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDOzs7QUFHakIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQztBQUN0QixJQUFJLFdBQVcsR0FBRyxjQUFjLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDOztBQUU1RCxTQUFTO0FBQ1QsS0FBSyxFQUFFLENBQUM7O0FBRVIsU0FBUyxLQUFLLEdBQUc7QUFDaEIsUUFBTyxHQUFHLElBQUksQ0FBQztBQUNmLEtBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzVCLFNBQVEsRUFBRSxDQUFDO0NBQ1g7O0FBRUQsU0FBUyxRQUFRLEdBQUc7QUFDbkIsS0FBSSxPQUFPLEVBQUU7QUFFWix1QkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFaEMsTUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUMvQixJQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQSxDQUFDLEdBQUksSUFBSSxDQUFDO0FBQ2xDLElBQUUsSUFBSSxRQUFRLENBQUM7QUFDZixNQUFJLEdBQUcsR0FBRyxDQUFDOzs7QUFHWCxnQkFBYyxJQUFJLEVBQUUsQ0FBQztBQUNyQixnQkFBYyxFQUFFLENBQUM7QUFDakIsYUFBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7Ozs7QUFLekIsTUFBSSxjQUFjLElBQUksQ0FBQyxFQUFFO0FBQ3hCLFVBQU8sR0FBRyxLQUFLLENBQUM7R0FDaEI7RUFFRCxNQUFNO0FBQ04sU0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQzVELHNCQUFzQixFQUFFLGNBQWMsQ0FBQyxDQUFDO0VBQ3pDO0NBRUQiLCJmaWxlIjoiL1VzZXJzL3JhbHBoZ2VybS9qcy9tb3ZzaW0tZXM2L3NyYy9qcy9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0Y3JlYXRlUmluZ1JvYWRcbn1cbmZyb20gJy4vcm9hZE5ldHdvcmtGYWN0b3J5JztcbmltcG9ydCBSb2FkTmV0d29yayBmcm9tICcuL3JvYWROZXR3b3JrJztcbmltcG9ydCBSb2FkU2VnbWVudCBmcm9tICcuL3JvYWRTZWdtZW50JztcbmltcG9ydCByYWYgZnJvbSAnLi9yYWYnO1xuXG4vLyBwb2x5ZmlsbCByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbnJhZigpO1xuXG5sZXQgZHQgPSAwLjI7XG5sZXQgc2ltdWxhdGlvblRpbWUgPSAwO1xubGV0IGl0ZXJhdGlvbkNvdW50ID0gMDtcblxubGV0IHJ1bm5pbmcgPSBmYWxzZTtcbmxldCB0aW1lO1xubGV0IHRpbWVXYXJwID0gNDtcblxuXG5sZXQgcm9hZExlbmd0aCA9IDEwMDA7XG5sZXQgbnVtYmVyT2ZMYW5lcyA9IDE7XG5sZXQgcm9hZE5ldHdvcmsgPSBjcmVhdGVSaW5nUm9hZChyb2FkTGVuZ3RoLCBudW1iZXJPZkxhbmVzKTtcblxuZGVidWdnZXI7XG5zdGFydCgpO1xuXG5mdW5jdGlvbiBzdGFydCgpIHtcblx0cnVubmluZyA9IHRydWU7XG5cdHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0bWFpbkxvb3AoKTtcbn1cblxuZnVuY3Rpb24gbWFpbkxvb3AoKSB7XG5cdGlmIChydW5uaW5nKSB7XG5cblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUobWFpbkxvb3ApO1xuXG5cdFx0dmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdGR0ID0gKG5vdyAtICh0aW1lIHx8IG5vdykpIC8gMTAwMDtcblx0XHRkdCAqPSB0aW1lV2FycDtcblx0XHR0aW1lID0gbm93O1xuXG5cdFx0Ly8gdXBkYXRlIHN0YXRlXG5cdFx0c2ltdWxhdGlvblRpbWUgKz0gZHQ7XG5cdFx0aXRlcmF0aW9uQ291bnQrKztcblx0XHRyb2FkTmV0d29yay50aW1lU3RlcChkdCk7XG5cblx0XHQvLyBkcmF3XG5cblx0XHQvLyBsaW1pdCBpdGVyYXRpb25zIGZvciBub3dcblx0XHRpZiAoaXRlcmF0aW9uQ291bnQgPj0gNSkge1xuXHRcdFx0cnVubmluZyA9IGZhbHNlO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUubG9nKCd0aW1lU3RlcDogJywgZHQsICcgLS0gc2ltVGltZTogJywgc2ltdWxhdGlvblRpbWUsXG5cdFx0XHQnIC0tIGl0ZXJhdGlvbmNvdW50OiAnLCBpdGVyYXRpb25Db3VudCk7XG5cdH1cblxufVxuIl19\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,","\"use strict\";\n\nvar _prototypeProperties = function (child, staticProps, instanceProps) {\n  if (staticProps) Object.defineProperties(child, staticProps);if (instanceProps) Object.defineProperties(child.prototype, instanceProps);\n};\n\nvar _classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar IdmParameters = (function () {\n  function IdmParameters() {\n    var v0 = arguments[0] === undefined ? 20 : arguments[0];\n    var a = arguments[1] === undefined ? 1.2 : arguments[1];\n    var b = arguments[2] === undefined ? 1.2 : arguments[2];\n    var T = arguments[3] === undefined ? 1.5 : arguments[3];\n    var s0 = arguments[4] === undefined ? 2 : arguments[4];\n    var s1 = arguments[5] === undefined ? 0 : arguments[5];\n    var delta = arguments[6] === undefined ? 4 : arguments[6];\n    _classCallCheck(this, IdmParameters);\n\n    this.v0 = v0;\n    this.a = a;\n    this.b = b;\n    this.T = T;\n    this.s0 = s0;\n    this.s1 = s1;\n    this.delta = delta;\n  }\n\n  _prototypeProperties(IdmParameters, {\n    getDefaultCar: {\n      value: function getDefaultCar() {\n        return new IdmParameters();\n      },\n      writable: true,\n      configurable: true\n    },\n    getDefaultTruck: {\n      value: function getDefaultTruck() {\n        var defaultTruck = new IdmParameters();\n        defaultTruck.v0 = 0.8 * defaultTruck.v0;\n        defaultTruck.a = 0.8 * defaultTruck.a;\n        defaultTruck.T = 1.2 * defaultTruck.T;\n        return defaultTruck;\n      },\n      writable: true,\n      configurable: true\n    }\n  });\n\n  return IdmParameters;\n})();\n\nmodule.exports = IdmParameters;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvbW92c2ltLWVzNi9zcmMvanMvaWRtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztJQUFxQixhQUFhO0FBRXJCLFdBRlEsYUFBYTtRQUVwQixFQUFFLGdDQUFHLEVBQUU7UUFBRSxDQUFDLGdDQUFHLEdBQUc7UUFBRSxDQUFDLGdDQUFHLEdBQUc7UUFBRSxDQUFDLGdDQUFHLEdBQUc7UUFBRSxFQUFFLGdDQUFHLENBQUM7UUFBRSxFQUFFLGdDQUFHLENBQUM7UUFBRSxLQUFLLGdDQUFHLENBQUM7MEJBRnRELGFBQWE7O0FBRzlCLFFBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWCxRQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQ3BCOzt1QkFWa0IsYUFBYTtBQVl6QixpQkFBYTthQUFBLHlCQUFHO0FBQ3JCLGVBQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztPQUM1Qjs7OztBQUVNLG1CQUFlO2FBQUEsMkJBQUc7QUFDdkIsWUFBSSxZQUFZLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUN2QyxvQkFBWSxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQztBQUN4QyxvQkFBWSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUN0QyxvQkFBWSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQztBQUN0QyxlQUFPLFlBQVksQ0FBQztPQUNyQjs7Ozs7O1NBdEJrQixhQUFhOzs7aUJBQWIsYUFBYSIsImZpbGUiOiIvVXNlcnMvcmFscGhnZXJtL2pzL21vdnNpbS1lczYvc3JjL2pzL2lkbS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIElkbVBhcmFtZXRlcnMge1xuXG4gIGNvbnN0cnVjdG9yKHYwID0gMjAsIGEgPSAxLjIsIGIgPSAxLjIsIFQgPSAxLjUsIHMwID0gMiwgczEgPSAwLCBkZWx0YSA9IDQpIHtcbiAgICB0aGlzLnYwID0gdjA7XG4gICAgdGhpcy5hID0gYTtcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuVCA9IFQ7XG4gICAgdGhpcy5zMCA9IHMwO1xuICAgIHRoaXMuczEgPSBzMTtcbiAgICB0aGlzLmRlbHRhID0gZGVsdGE7XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVmYXVsdENhcigpIHtcbiAgICByZXR1cm4gbmV3IElkbVBhcmFtZXRlcnMoKTtcbiAgfTtcblxuICBzdGF0aWMgZ2V0RGVmYXVsdFRydWNrKCkge1xuICAgIGxldCBkZWZhdWx0VHJ1Y2sgPSBuZXcgSWRtUGFyYW1ldGVycygpO1xuICAgIGRlZmF1bHRUcnVjay52MCA9IDAuOCAqIGRlZmF1bHRUcnVjay52MDtcbiAgICBkZWZhdWx0VHJ1Y2suYSA9IDAuOCAqIGRlZmF1bHRUcnVjay5hO1xuICAgIGRlZmF1bHRUcnVjay5UID0gMS4yICogZGVmYXVsdFRydWNrLlQ7XG4gICAgcmV0dXJuIGRlZmF1bHRUcnVjaztcbiAgfTtcblxufVxuIl19\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvbW92c2ltLWVzNi9zcmMvanMvaWRtLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLG9CQUFvQixHQUFHLFVBQVUsS0FBSyxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUU7QUFBRSxNQUFJLFdBQVcsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDLEFBQUMsSUFBSSxhQUFhLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7Q0FBRSxDQUFDOztBQUV0TixJQUFJLGVBQWUsR0FBRyxVQUFVLFFBQVEsRUFBRSxXQUFXLEVBQUU7QUFBRSxNQUFJLEVBQUUsUUFBUSxZQUFZLFdBQVcsQ0FBQSxBQUFDLEVBQUU7QUFBRSxVQUFNLElBQUksU0FBUyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7R0FBRTtDQUFFLENBQUM7O0FBRWpLLElBQUksYUFBYSxHQUFHLENBQUMsWUFBWTtBQUMvQixXQUFTLGFBQWEsR0FBRztBQUN2QixRQUFJLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsUUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hELFFBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN4RCxRQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEQsUUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELFFBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2RCxRQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxHQUFHLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUQsbUJBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7O0FBRXJDLFFBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ2IsUUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWCxRQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLFFBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ1gsUUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDYixRQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0dBQ3BCOztBQUVELHNCQUFvQixDQUFDLGFBQWEsRUFBRTtBQUNsQyxpQkFBYSxFQUFFO0FBQ2IsV0FBSyxFQUFFLFNBQVMsYUFBYSxHQUFHO0FBQzlCLGVBQU8sSUFBSSxhQUFhLEVBQUUsQ0FBQztPQUM1QjtBQUNELGNBQVEsRUFBRSxJQUFJO0FBQ2Qsa0JBQVksRUFBRSxJQUFJO0tBQ25CO0FBQ0QsbUJBQWUsRUFBRTtBQUNmLFdBQUssRUFBRSxTQUFTLGVBQWUsR0FBRztBQUNoQyxZQUFJLFlBQVksR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBQ3ZDLG9CQUFZLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsRUFBRSxDQUFDO0FBQ3hDLG9CQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLG9CQUFZLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLGVBQU8sWUFBWSxDQUFDO09BQ3JCO0FBQ0QsY0FBUSxFQUFFLElBQUk7QUFDZCxrQkFBWSxFQUFFLElBQUk7S0FDbkI7R0FDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxhQUFhLENBQUM7Q0FDdEIsQ0FBQSxFQUFHLENBQUM7O0FBRUwsTUFBTSxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMiLCJmaWxlIjoiL1VzZXJzL3JhbHBoZ2VybS9qcy9tb3ZzaW0tZXM2L3NyYy9qcy9pZG0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9wcm90b3R5cGVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGNoaWxkLCBzdGF0aWNQcm9wcywgaW5zdGFuY2VQcm9wcykgeyBpZiAoc3RhdGljUHJvcHMpIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNoaWxkLCBzdGF0aWNQcm9wcyk7IGlmIChpbnN0YW5jZVByb3BzKSBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjaGlsZC5wcm90b3R5cGUsIGluc3RhbmNlUHJvcHMpOyB9O1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH07XG5cbnZhciBJZG1QYXJhbWV0ZXJzID0gKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSWRtUGFyYW1ldGVycygpIHtcbiAgICB2YXIgdjAgPSBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IDIwIDogYXJndW1lbnRzWzBdO1xuICAgIHZhciBhID0gYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgPyAxLjIgOiBhcmd1bWVudHNbMV07XG4gICAgdmFyIGIgPSBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IDEuMiA6IGFyZ3VtZW50c1syXTtcbiAgICB2YXIgVCA9IGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkID8gMS41IDogYXJndW1lbnRzWzNdO1xuICAgIHZhciBzMCA9IGFyZ3VtZW50c1s0XSA9PT0gdW5kZWZpbmVkID8gMiA6IGFyZ3VtZW50c1s0XTtcbiAgICB2YXIgczEgPSBhcmd1bWVudHNbNV0gPT09IHVuZGVmaW5lZCA/IDAgOiBhcmd1bWVudHNbNV07XG4gICAgdmFyIGRlbHRhID0gYXJndW1lbnRzWzZdID09PSB1bmRlZmluZWQgPyA0IDogYXJndW1lbnRzWzZdO1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJZG1QYXJhbWV0ZXJzKTtcblxuICAgIHRoaXMudjAgPSB2MDtcbiAgICB0aGlzLmEgPSBhO1xuICAgIHRoaXMuYiA9IGI7XG4gICAgdGhpcy5UID0gVDtcbiAgICB0aGlzLnMwID0gczA7XG4gICAgdGhpcy5zMSA9IHMxO1xuICAgIHRoaXMuZGVsdGEgPSBkZWx0YTtcbiAgfVxuXG4gIF9wcm90b3R5cGVQcm9wZXJ0aWVzKElkbVBhcmFtZXRlcnMsIHtcbiAgICBnZXREZWZhdWx0Q2FyOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVmYXVsdENhcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJZG1QYXJhbWV0ZXJzKCk7XG4gICAgICB9LFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9LFxuICAgIGdldERlZmF1bHRUcnVjazoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRUcnVjaygpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRUcnVjayA9IG5ldyBJZG1QYXJhbWV0ZXJzKCk7XG4gICAgICAgIGRlZmF1bHRUcnVjay52MCA9IDAuOCAqIGRlZmF1bHRUcnVjay52MDtcbiAgICAgICAgZGVmYXVsdFRydWNrLmEgPSAwLjggKiBkZWZhdWx0VHJ1Y2suYTtcbiAgICAgICAgZGVmYXVsdFRydWNrLlQgPSAxLjIgKiBkZWZhdWx0VHJ1Y2suVDtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRUcnVjaztcbiAgICAgIH0sXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIElkbVBhcmFtZXRlcnM7XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElkbVBhcmFtZXRlcnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVd4d2FHZGxjbTB2YW5NdmJXOTJjMmx0TFdWek5pOXpjbU12YW5NdmFXUnRMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096dEpRVUZ4UWl4aFFVRmhPMEZCUlhKQ0xGZEJSbEVzWVVGQllUdFJRVVZ3UWl4RlFVRkZMR2REUVVGSExFVkJRVVU3VVVGQlJTeERRVUZETEdkRFFVRkhMRWRCUVVjN1VVRkJSU3hEUVVGRExHZERRVUZITEVkQlFVYzdVVUZCUlN4RFFVRkRMR2REUVVGSExFZEJRVWM3VVVGQlJTeEZRVUZGTEdkRFFVRkhMRU5CUVVNN1VVRkJSU3hGUVVGRkxHZERRVUZITEVOQlFVTTdVVUZCUlN4TFFVRkxMR2REUVVGSExFTkJRVU03TUVKQlJuUkVMR0ZCUVdFN08wRkJSemxDTEZGQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRMklzVVVGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRXQ3hSUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTllMRkZCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlExZ3NVVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRFlpeFJRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOaUxGRkJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMGRCUTNCQ096dDFRa0ZXYTBJc1lVRkJZVHRCUVZsNlFpeHBRa0ZCWVR0aFFVRkJMSGxDUVVGSE8wRkJRM0pDTEdWQlFVOHNTVUZCU1N4aFFVRmhMRVZCUVVVc1EwRkJRenRQUVVNMVFqczdPenRCUVVWTkxHMUNRVUZsTzJGQlFVRXNNa0pCUVVjN1FVRkRka0lzV1VGQlNTeFpRVUZaTEVkQlFVY3NTVUZCU1N4aFFVRmhMRVZCUVVVc1EwRkJRenRCUVVOMlF5eHZRa0ZCV1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFZEJRVWNzV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXp0QlFVTjRReXh2UWtGQldTeERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1dVRkJXU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU4wUXl4dlFrRkJXU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMFF5eGxRVUZQTEZsQlFWa3NRMEZCUXp0UFFVTnlRanM3T3pzN08xTkJkRUpyUWl4aFFVRmhPenM3YVVKQlFXSXNZVUZCWVNJc0ltWnBiR1VpT2lJdlZYTmxjbk12Y21Gc2NHaG5aWEp0TDJwekwyMXZkbk5wYlMxbGN6WXZjM0pqTDJwekwybGtiUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCa1pXWmhkV3gwSUdOc1lYTnpJRWxrYlZCaGNtRnRaWFJsY25NZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtIWXdJRDBnTWpBc0lHRWdQU0F4TGpJc0lHSWdQU0F4TGpJc0lGUWdQU0F4TGpVc0lITXdJRDBnTWl3Z2N6RWdQU0F3TENCa1pXeDBZU0E5SURRcElIdGNiaUFnSUNCMGFHbHpMbll3SUQwZ2RqQTdYRzRnSUNBZ2RHaHBjeTVoSUQwZ1lUdGNiaUFnSUNCMGFHbHpMbUlnUFNCaU8xeHVJQ0FnSUhSb2FYTXVWQ0E5SUZRN1hHNGdJQ0FnZEdocGN5NXpNQ0E5SUhNd08xeHVJQ0FnSUhSb2FYTXVjekVnUFNCek1UdGNiaUFnSUNCMGFHbHpMbVJsYkhSaElEMGdaR1ZzZEdFN1hHNGdJSDFjYmx4dUlDQnpkR0YwYVdNZ1oyVjBSR1ZtWVhWc2RFTmhjaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVsa2JWQmhjbUZ0WlhSbGNuTW9LVHRjYmlBZ2ZUdGNibHh1SUNCemRHRjBhV01nWjJWMFJHVm1ZWFZzZEZSeWRXTnJLQ2tnZTF4dUlDQWdJR3hsZENCa1pXWmhkV3gwVkhKMVkyc2dQU0J1WlhjZ1NXUnRVR0Z5WVcxbGRHVnljeWdwTzF4dUlDQWdJR1JsWm1GMWJIUlVjblZqYXk1Mk1DQTlJREF1T0NBcUlHUmxabUYxYkhSVWNuVmpheTUyTUR0Y2JpQWdJQ0JrWldaaGRXeDBWSEoxWTJzdVlTQTlJREF1T0NBcUlHUmxabUYxYkhSVWNuVmpheTVoTzF4dUlDQWdJR1JsWm1GMWJIUlVjblZqYXk1VUlEMGdNUzR5SUNvZ1pHVm1ZWFZzZEZSeWRXTnJMbFE3WEc0Z0lDQWdjbVYwZFhKdUlHUmxabUYxYkhSVWNuVmphenRjYmlBZ2ZUdGNibHh1ZlZ4dUlsMTkiXX0=\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,","// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n// requestAnimationFrame polyfill by Erik Möller\n// fixes from Paul Irish and Tino Zijdel\n\nexport default function raf() {\n\tvar lastTime = 0;\n\tvar vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] ||\n\t\t\twindow[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n\n\tif (!window.requestAnimationFrame)\n\t\twindow.requestAnimationFrame = function(callback, element) {\n\t\t\tvar currTime = new Date().getTime();\n\t\t\tvar timeToCall = Math.max(0, 16 - (currTime - lastTime));\n\t\t\tvar id = window.setTimeout(function() {\n\t\t\t\t\tcallback(currTime + timeToCall);\n\t\t\t\t},\n\t\t\t\ttimeToCall);\n\t\t\tlastTime = currTime + timeToCall;\n\t\t\treturn id;\n\t\t};\n\n\tif (!window.cancelAnimationFrame)\n\t\twindow.cancelAnimationFrame = function(id) {\n\t\t\tclearTimeout(id);\n\t\t};\n\n\tconsole.log('requestAnimationFrame set: ', window.requestAnimationFrame);\n}\n","export default class RoadLane {\n\n  constructor(roadSegment) {\n    this.vehicles = [];\n    this.roadSegment = roadSegment;\n    this.sinkLaneSegment = null; //TODO\n    this.sourceLaneSegment = null; //TODO\n  }\n\n  getRoadLength() {\n    return this.roadSegment.roadLength;\n  };\n\n  addVehicle(vehicle) {\n    this.vehicles.push(vehicle);\n  };\n\n  updateVehicleAccelerations() {\n    for (var i = 0, len = this.vehicles.length; i < len; i++) {\n      var vehicle = this.vehicles[i];\n      vehicle.updateAcceleration(this);\n    }\n  };\n\n  updateSpeedAndPosition(dt) {\n    for (var i = 0; i < this.vehicles.length; i++) {\n      var vehicle = this.vehicles[i];\n      vehicle.updateSpeedAndPosition(dt);\n      if (this.roadSegment.parameters.ringRoad && vehicle.position > this.roadSegment\n        .parameters.roadLength) {\n        vehicle.position -= this.roadSegment.parameters.roadLength;\n      }\n    }\n  };\n\n  getLaneRearVehicle() {\n    if (this.vehicles.length > 0) {\n      return this.vehicles[this.vehicles.length - 1];\n    }\n    return null;\n  };\n\n  getLaneFrontVehicle() {\n    if (this.vehicles.length > 0) {\n      return this.vehicles[0];\n    }\n    return null;\n  };\n\n  getRearVehicle(position) {\n    var index = this._positionBinarySearch(position);\n    var insertionPoint = -index - 1;\n    if (index >= 0) {\n      // exact match found, so return the matched vehicle\n      if (index < this.vehicles.length) {\n        return this.vehicles[index];\n      }\n    } else {\n      // get next vehicle if not past end\n      if (insertionPoint < this.vehicles.length) {\n        return this.vehicles[insertionPoint];\n      }\n    }\n    if (this.sourceLaneSegment !== null) {\n      // didn't find a rear vehicle in the current road segment, so\n      // check the previous (source) road segment\n      // and continue until a vehicle is found or no further source is connected to laneSegment\n      var sourceFrontVehicle = null;\n      var source = this.sourceLaneSegment;\n      var accumDistance = 0;\n      do {\n        accumDistance += source.getRoadLength();\n        sourceFrontVehicle = source.laneFrontVehicle();\n        source = source.sourceLaneSegment();\n      } while (sourceFrontVehicle === null && source !== null);\n      if (sourceFrontVehicle !== null) {\n        var newPosition = sourceFrontVehicle.getFrontPosition() -\n          accumDistance;\n        return movsim.simulation.moveable.create(sourceFrontVehicle,\n          newPosition);\n      }\n    }\n    return null;\n  };\n\n  getFrontVehicle(position) {\n    var index = this._positionBinarySearch(position);\n    var insertionPoint = -index - 1;\n    if (index > 0) {\n      return this.vehicles[index - 1]; // exact match found\n    } else if (insertionPoint > 0) {\n      return this.vehicles[insertionPoint - 1];\n    }\n    // index == 0 or insertionPoint == 0\n    // subject vehicle is front vehicle on this road segment, so check for vehicles\n    // on sink lane segment\n    if (this.sinkLaneSegment !== null) {\n      var sinkRearVehicle = null;\n      var sink = this.sinkLaneSegment;\n      var accumDistance = this.getRoadLength();\n      do {\n        sinkRearVehicle = sink.rearVehicle();\n        if (sinkRearVehicle === null) {\n          accumDistance += sink.getRoadLength();\n        }\n        sink = sink.sinkLaneSegment();\n      } while (sinkRearVehicle === null && sink !== null);\n      if (sinkRearVehicle !== null) {\n        var newPosition = sinkRearVehicle.getFrontPosition() + accumDistance;\n        return movsim.simulation.moveable.create(sinkRearVehicle, newPosition);\n      }\n    }\n    return null;\n  };\n\n  updateOutflow(dt) {\n    // remove vehicles with position > this.roadSegment.roadLength (later: assign to linked lane)\n    // for ringroad set vehicle at beginning of lane (periodic boundary conditions)\n    var roadLength = this.roadSegment.roadLength;\n    var vehicle;\n    for (var i = 0, len = this.vehicles.length; i < len; i++) {\n      vehicle = this.vehicles[i];\n      if (vehicle.position > roadLength) {\n        //                this.vehicles.remove(i);\n        // ring road special case TODO remove\n        vehicle.position -= roadLength;\n      }\n    }\n    this._sortVehicles();\n  };\n\n  updateInflow(dt) {\n    // TODO\n  };\n\n  _sortVehicles() {\n    this.vehicles.sort(function(a, b) {\n      return a.position - b.position;\n    });\n  };\n\n  getLeader(vehicle) {\n    var vehicleIndex = this._getPositionInArray(vehicle.id);\n    if (this.vehicles.length <= 1) {\n      return null;\n    }\n    if (vehicleIndex === this.vehicles.length - 1) {\n      return this.roadSegment.ringRoad === true ? this.vehicles[0] : null;\n    }\n    return this.vehicles[vehicleIndex + 1];\n  };\n\n  getPositionInArray(id) {\n    // TODO es6 -> findIndex\n    var index = this.vehicles.map(function(el) {\n      return el.id;\n    }).indexOf(id);\n    return index;\n  };\n\n}\n","export default class RoadNetwork {\n\n\tconstructor() {\n\t\tthis.roadSegments = [];\n\t\tconsole.log('contructor RoadNetwork')\n\t}\n\n\taddRoadSegment(roadSegment) {\n\t\tthis.roadSegments.push(roadSegment);\n\t\tconsole.log('  added ', roadSegment, ' to roadNetwork', this.roadSegments);\n\t}\n\n\ttimeStep(dt) {\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.considerLaneChanges(dt);\n\t\t});\n\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.updateVehicleAccelerations(dt);\n\t\t});\n\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.updateVehiclePositionsAndSpeeds(dt);\n\t\t});\n\n\t\t// for debugging\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.checkForInconsistencies(dt);\n\t\t});\n\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.updateOutflow(dt);\n\t\t});\n\n\t\tthis.roadSegments.forEach(function(roadSegmet) {\n\t\t\troadSegmet.updateInflow(dt);\n\t\t});\n\t}\n\n}\n","import RoadNetwork from './roadNetwork';\nimport RoadSegment from './roadSegment';\n\nexport function createRingRoad(roadLength, numberOfLanes) {\n  var roadNetwork = new RoadNetwork();\n\n  // create one roadSection representing a ring road (anti-clockwise driving direction)\n  var roadSegmentParameters = RoadSegment.getDefaultParameters();\n  roadSegmentParameters.ringRoad = true;\n  roadSegmentParameters.roadLength = roadLength;\n  roadSegmentParameters.numberOfLanes = numberOfLanes;\n  roadSegmentParameters.globalX = 0;\n  roadSegmentParameters.globalY = 200;\n  roadSegmentParameters.heading = 0;\n  roadSegmentParameters.curvature = 2 * Math.PI / roadLength;\n\n  var roadSegment = new RoadSegment(roadSegmentParameters);\n\n  roadNetwork.addRoadSegment(roadSegment);\n  return roadNetwork;\n};\n","\"use strict\";\n\nvar _interopRequire = function (obj) {\n\treturn obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nvar _prototypeProperties = function (child, staticProps, instanceProps) {\n\tif (staticProps) Object.defineProperties(child, staticProps);if (instanceProps) Object.defineProperties(child.prototype, instanceProps);\n};\n\nvar _classCallCheck = function (instance, Constructor) {\n\tif (!(instance instanceof Constructor)) {\n\t\tthrow new TypeError(\"Cannot call a class as a function\");\n\t}\n};\n\nvar RoadLane = _interopRequire(require(\"./roadLane\"));\n\nvar Vehicle = _interopRequire(require(\"./vehicle\"));\n\nvar IdmParameters = _interopRequire(require(\"./idm\"));\n\nvar RoadSegment = (function () {\n\tfunction RoadSegment(options) {\n\t\t_classCallCheck(this, RoadSegment);\n\n\t\tthis.roadLanes = [];\n\n\t\tfor (var i = 1; i <= options.numberOfLanes; i++) {\n\t\t\tvar roadLane = new RoadLane(this);\n\t\t\tthis.roadLanes.push(roadLane);\n\t\t}\n\n\t\tvar vehiclesInOneLane = options.roadLength * options.initDensityPerLane;\n\t\tvar numberOfVehicles = Math.floor(options.numberOfLanes * vehiclesInOneLane);\n\t\tthis._initializeVehicles(numberOfVehicles, options.initTruckFraction);\n\n\t\tconsole.log(\"constructor RoadSegment\");\n\t\tdebugger;\n\t}\n\n\t_prototypeProperties(RoadSegment, {\n\t\tgetDefaultParameters: {\n\t\t\tvalue: function getDefaultParameters() {\n\t\t\t\tvar roadSectionParameters = {};\n\t\t\t\troadSectionParameters.roadLength = 1000;\n\t\t\t\troadSectionParameters.numberOfLanes = 1;\n\t\t\t\troadSectionParameters.initDensityPerLane = 10 / 1000;\n\t\t\t\troadSectionParameters.initTruckFraction = 0.1;\n\t\t\t\troadSectionParameters.ringRoad = false;\n\t\t\t\troadSectionParameters.globalX = 0;\n\t\t\t\troadSectionParameters.globalY = 0;\n\t\t\t\troadSectionParameters.heading = 0;\n\t\t\t\troadSectionParameters.curvature = 0;\n\t\t\t\troadSectionParameters.laneWidth = 10;\n\t\t\t\treturn roadSectionParameters;\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t}\n\t}, {\n\t\tconsiderLaneChanges: {\n\t\t\tvalue: function considerLaneChanges(dt) {\n\t\t\t\tconsole.log(\"no lane changes\");\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\tupdateVehicleAccelerations: {\n\t\t\tvalue: function updateVehicleAccelerations(dt) {\n\t\t\t\tconsole.log(\"updateVehicleAccelerations with dt: \", dt);\n\t\t\t\tfor (var i = 0; i < lanes; i++) {\n\t\t\t\t\tthis.roadLanes[i].updateVehicleAccelerations(dt);\n\t\t\t\t}\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\tupdateVehiclePositionsAndSpeeds: {\n\t\t\tvalue: function updateVehiclePositionsAndSpeeds(dt) {\n\t\t\t\tconsole.log(\"updateVehiclePositionsAndSpeeds with dt: \", dt);\n\t\t\t\tfor (var i = 0; i < lanes; i++) {\n\t\t\t\t\tthis.roadLanes[i].updateVehiclePositionsAndSpeeds(dt);\n\t\t\t\t}\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\tcheckForInconsistencies: {\n\t\t\tvalue: function checkForInconsistencies(dt) {\n\t\t\t\tconsole.log(\"checkForInconsistencies with dt: \", dt);\n\t\t\t\t// TODO implement check for negative vehicle distances\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\tupdateOutflow: {\n\t\t\tvalue: function updateOutflow(dt) {\n\t\t\t\tconsole.log(\"updateOutflow with dt: \", dt);\n\t\t\t\tfor (var i = 0; i < lanes; i++) {\n\t\t\t\t\tthis.roadLanes[i].updateOutflow(dt);\n\t\t\t\t}\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\tupdateInflow: {\n\t\t\tvalue: function updateInflow(dt) {\n\t\t\t\tconsole.log(\"updateInflow with dt: \", dt);\n\t\t\t\tfor (var i = 0; i < lanes; i++) {\n\t\t\t\t\tthis.roadLanes[i].updateInflow(dt);\n\t\t\t\t}\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t},\n\t\t_initializeVehicles: {\n\t\t\tvalue: function _initializeVehicles(numberOfVehicles, truckFraction) {\n\t\t\t\tfor (var i = 0; i < numberOfVehicles; i++) {\n\t\t\t\t\tvar vehicleParameters = Vehicle.getDefaultParameters();\n\t\t\t\t\tvehicleParameters.isTruck = Math.random() < truckFraction;\n\t\t\t\t\t// initialize all vehicles with same speed determined by slower trucks\n\t\t\t\t\tvehicleParameters.speed = 0.8 * IdmParameters.getDefaultTruck().v0;\n\t\t\t\t\tvehicleParameters.position = i * 100; // TODO init correctly\n\t\t\t\t\tvar vehicle = new Vehicle(vehicleParameters);\n\t\t\t\t\tvar lane = i % this.roadLanes.length;\n\t\t\t\t\tthis.roadLanes[lane].addVehicle(vehicle);\n\t\t\t\t}\n\t\t\t},\n\t\t\twritable: true,\n\t\t\tconfigurable: true\n\t\t}\n\t});\n\n\treturn RoadSegment;\n})();\n\nmodule.exports = RoadSegment;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvbW92c2ltLWVzNi9zcmMvanMvcm9hZFNlZ21lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7SUFBTyxRQUFRLDJCQUFNLFlBQVk7O0lBQzFCLE9BQU8sMkJBQU0sV0FBVzs7SUFDeEIsYUFBYSwyQkFBTSxPQUFPOztJQUVaLFdBQVc7QUFFcEIsVUFGUyxXQUFXLENBRW5CLE9BQU87d0JBRkMsV0FBVzs7QUFHOUIsTUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7O0FBRXBCLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2hELE9BQUksUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLE9BQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0dBQzlCOztBQUVELE1BQUksaUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUM7QUFDeEUsTUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsQ0FBQztBQUM3RSxNQUFJLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRXRFLFNBQU8sQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUN2QyxXQUFTO0VBQ1Q7O3NCQWhCbUIsV0FBVztBQXVEeEIsc0JBQW9CO1VBQUEsZ0NBQUc7QUFDN0IsUUFBSSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDL0IseUJBQXFCLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztBQUN4Qyx5QkFBcUIsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLHlCQUFxQixDQUFDLGtCQUFrQixH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QUFHLENBQUM7QUFDckMsU0FBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3QyxTQUFJLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDckMsU0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDekM7SUFDRDs7Ozs7O1FBbEZtQixXQUFXOzs7aUJBQVgsV0FBVyIsImZpbGUiOiIvVXNlcnMvcmFscGhnZXJtL2pzL21vdnNpbS1lczYvc3JjL2pzL3JvYWRTZWdtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJvYWRMYW5lIGZyb20gJy4vcm9hZExhbmUnO1xuaW1wb3J0IFZlaGljbGUgZnJvbSAnLi92ZWhpY2xlJztcbmltcG9ydCBJZG1QYXJhbWV0ZXJzIGZyb20gJy4vaWRtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9hZFNlZ21lbnQge1xuXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcblx0XHR0aGlzLnJvYWRMYW5lcyA9IFtdO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDE7IGkgPD0gb3B0aW9ucy5udW1iZXJPZkxhbmVzOyBpKyspIHtcblx0XHRcdGxldCByb2FkTGFuZSA9IG5ldyBSb2FkTGFuZSh0aGlzKTtcblx0XHRcdHRoaXMucm9hZExhbmVzLnB1c2gocm9hZExhbmUpO1xuXHRcdH1cblxuXHRcdHZhciB2ZWhpY2xlc0luT25lTGFuZSA9IG9wdGlvbnMucm9hZExlbmd0aCAqIG9wdGlvbnMuaW5pdERlbnNpdHlQZXJMYW5lO1xuXHRcdHZhciBudW1iZXJPZlZlaGljbGVzID0gTWF0aC5mbG9vcihvcHRpb25zLm51bWJlck9mTGFuZXMgKiB2ZWhpY2xlc0luT25lTGFuZSk7XG5cdFx0dGhpcy5faW5pdGlhbGl6ZVZlaGljbGVzKG51bWJlck9mVmVoaWNsZXMsIG9wdGlvbnMuaW5pdFRydWNrRnJhY3Rpb24pO1xuXG5cdFx0Y29uc29sZS5sb2coJ2NvbnN0cnVjdG9yIFJvYWRTZWdtZW50Jyk7XG5cdFx0ZGVidWdnZXI7XG5cdH1cblxuXHRjb25zaWRlckxhbmVDaGFuZ2VzKGR0KSB7XG5cdFx0Y29uc29sZS5sb2coJ25vIGxhbmUgY2hhbmdlcycpO1xuXHR9XG5cblx0dXBkYXRlVmVoaWNsZUFjY2VsZXJhdGlvbnMoZHQpIHtcblx0XHRjb25zb2xlLmxvZygndXBkYXRlVmVoaWNsZUFjY2VsZXJhdGlvbnMgd2l0aCBkdDogJywgZHQpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGFuZXM7IGkrKykge1xuXHRcdFx0dGhpcy5yb2FkTGFuZXNbaV0udXBkYXRlVmVoaWNsZUFjY2VsZXJhdGlvbnMoZHQpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZVZlaGljbGVQb3NpdGlvbnNBbmRTcGVlZHMoZHQpIHtcblx0XHRjb25zb2xlLmxvZygndXBkYXRlVmVoaWNsZVBvc2l0aW9uc0FuZFNwZWVkcyB3aXRoIGR0OiAnLCBkdCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsYW5lczsgaSsrKSB7XG5cdFx0XHR0aGlzLnJvYWRMYW5lc1tpXS51cGRhdGVWZWhpY2xlUG9zaXRpb25zQW5kU3BlZWRzKGR0KTtcblx0XHR9XG5cdH1cblxuXHRjaGVja0ZvckluY29uc2lzdGVuY2llcyhkdCkge1xuXHRcdGNvbnNvbGUubG9nKCdjaGVja0ZvckluY29uc2lzdGVuY2llcyB3aXRoIGR0OiAnLCBkdCk7XG5cdFx0Ly8gVE9ETyBpbXBsZW1lbnQgY2hlY2sgZm9yIG5lZ2F0aXZlIHZlaGljbGUgZGlzdGFuY2VzXG5cdH1cblxuXHR1cGRhdGVPdXRmbG93KGR0KSB7XG5cdFx0Y29uc29sZS5sb2coJ3VwZGF0ZU91dGZsb3cgd2l0aCBkdDogJywgZHQpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGFuZXM7IGkrKykge1xuXHRcdFx0dGhpcy5yb2FkTGFuZXNbaV0udXBkYXRlT3V0ZmxvdyhkdCk7XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlSW5mbG93KGR0KSB7XG5cdFx0Y29uc29sZS5sb2coJ3VwZGF0ZUluZmxvdyB3aXRoIGR0OiAnLCBkdCk7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsYW5lczsgaSsrKSB7XG5cdFx0XHR0aGlzLnJvYWRMYW5lc1tpXS51cGRhdGVJbmZsb3coZHQpO1xuXHRcdH1cblx0fVxuXG5cdHN0YXRpYyBnZXREZWZhdWx0UGFyYW1ldGVycygpIHtcblx0XHRsZXQgcm9hZFNlY3Rpb25QYXJhbWV0ZXJzID0ge307XG5cdFx0cm9hZFNlY3Rpb25QYXJhbWV0ZXJzLnJvYWRMZW5ndGggPSAxMDAwO1xuXHRcdHJvYWRTZWN0aW9uUGFyYW1ldGVycy5udW1iZXJPZkxhbmVzID0gMTtcblx0XHRyb2FkU2VjdGlvblBhcmFtZXRlcnMuaW5pdERlbnNpdHlQZXJMYW5lID0gMTAgLyAxMDAwO1xuXHRcdHJvYWRTZWN0aW9uUGFyYW1ldGVycy5pbml0VHJ1Y2tGcmFjdGlvbiA9IDAuMTtcblx0XHRyb2FkU2VjdGlvblBhcmFtZXRlcnMucmluZ1JvYWQgPSBmYWxzZTtcblx0XHRyb2FkU2VjdGlvblBhcmFtZXRlcnMuZ2xvYmFsWCA9IDA7XG5cdFx0cm9hZFNlY3Rpb25QYXJhbWV0ZXJzLmdsb2JhbFkgPSAwO1xuXHRcdHJvYWRTZWN0aW9uUGFyYW1ldGVycy5oZWFkaW5nID0gMDtcblx0XHRyb2FkU2VjdGlvblBhcmFtZXRlcnMuY3VydmF0dXJlID0gMDtcblx0XHRyb2FkU2VjdGlvblBhcmFtZXRlcnMubGFuZVdpZHRoID0gMTA7XG5cdFx0cmV0dXJuIHJvYWRTZWN0aW9uUGFyYW1ldGVycztcblx0fVxuXG5cdF9pbml0aWFsaXplVmVoaWNsZXMobnVtYmVyT2ZWZWhpY2xlcywgdHJ1Y2tGcmFjdGlvbikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZWZWhpY2xlczsgaSsrKSB7XG5cdFx0XHR2YXIgdmVoaWNsZVBhcmFtZXRlcnMgPSBWZWhpY2xlLmdldERlZmF1bHRQYXJhbWV0ZXJzKCk7XG5cdFx0XHR2ZWhpY2xlUGFyYW1ldGVycy5pc1RydWNrID0gTWF0aC5yYW5kb20oKSA8IHRydWNrRnJhY3Rpb247XG5cdFx0XHQvLyBpbml0aWFsaXplIGFsbCB2ZWhpY2xlcyB3aXRoIHNhbWUgc3BlZWQgZGV0ZXJtaW5lZCBieSBzbG93ZXIgdHJ1Y2tzXG5cdFx0XHR2ZWhpY2xlUGFyYW1ldGVycy5zcGVlZCA9IDAuOCAqIElkbVBhcmFtZXRlcnMuZ2V0RGVmYXVsdFRydWNrKClcblx0XHRcdFx0LnYwO1xuXHRcdFx0dmVoaWNsZVBhcmFtZXRlcnMucG9zaXRpb24gPSBpICogMTAwOyAvLyBUT0RPIGluaXQgY29ycmVjdGx5XG5cdFx0XHR2YXIgdmVoaWNsZSA9IG5ldyBWZWhpY2xlKHZlaGljbGVQYXJhbWV0ZXJzKTtcblx0XHRcdHZhciBsYW5lID0gaSAlIHRoaXMucm9hZExhbmVzLmxlbmd0aDtcblx0XHRcdHRoaXMucm9hZExhbmVzW2xhbmVdLmFkZFZlaGljbGUodmVoaWNsZSk7XG5cdFx0fVxuXHR9O1xufVxuIl19\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,","var numberOfCreatedVehicles = 0;\n\nexport default class Vehicle {\n\n\tconstructor(vehicleParameters) {\n\t\tthis.vehicleParameters = vehicleParameters;\n\t\tconsole.log('contructed vehicle with: ', vehicleParameters);\n\t}\n\n\tstatic getDefaultParameters(isTruck = false) {\n\t\tlet vehicleParameters = {};\n\t\tvehicleParameters.isTruck = isTruck;\n\t\tvehicleParameters.length = (isTruck) ? 15 : 7;\n\t\tvehicleParameters.width = (isTruck) ? 3 : 2.5;\n\t\tvehicleParameters.position = 0;\n\t\tvehicleParameters.speed = 0;\n\t\tvehicleParameters.acc = 0;\n\t\treturn vehicleParameters;\n\t};\n}\n"]}