{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/main.js","src/js/car.js","src/js/idm.js"],"names":[],"mappings":"AAAA;ACAA,YAAY,CAAC;;AAEb,IAAI,eAAe,GAAG,UAAU,GAAG,EAAE;AACpC,QAAO,GAAG,IAAI,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC;CACpD,CAAC;;AAEF,IAAI,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE5C,IAAI,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;;;;AAK5C,IAAI,gBAAgB,GAAG;AACtB,EAAC,EAAE,GAAG;AACN,EAAC,EAAE,CAAC;CACJ,CAAC;;AAEF,IAAI,SAAS,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC;;AAE1C,IAAI,QAAQ,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;AAClC,IAAI,SAAS,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;;;;;;;;;;;;ICrBd,GAAG,GAEZ,SAFS,GAAG,CAEX,SAAS;uBAFD,GAAG;;AAGtB,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;AAC3B,QAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;CACzC;;iBALmB,GAAG;;;;;;;ICAH,GAAG,GAEX,SAFQ,GAAG,CAEV,OAAO;wBAFA,GAAG;;AAGpB,MAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;AACxB,MAAI,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;;AAExB,SAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;CAC5B;;iBAPkB,GAAG","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nvar _interopRequire = function (obj) {\n\treturn obj && obj.__esModule ? obj[\"default\"] : obj;\n};\n\nvar Car = _interopRequire(require(\"./car\"));\n\nvar Idm = _interopRequire(require(\"./idm\"));\n\n\n\n\nvar longModelOptions = {\n\ta: 1.5,\n\tb: 1\n};\n\nvar longModel = new Idm(longModelOptions);\n\nvar firstCar = new Car(longModel);\nvar secondCar = new Car(longModel);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvaG9tZXBhZ2Uvc3JjL2pzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztJQUFPLEdBQUcsMkJBQU0sT0FBTzs7SUFDaEIsR0FBRywyQkFBTSxPQUFPOzs7OztBQUd2QixJQUFJLGdCQUFnQixHQUFHO0FBQ3RCLEVBQUMsRUFBRSxHQUFHO0FBQ04sRUFBQyxFQUFFLENBQUM7Q0FDSixDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0FBRTFDLElBQUksUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLElBQUksU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9yYWxwaGdlcm0vanMvaG9tZXBhZ2Uvc3JjL2pzL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2FyIGZyb20gJy4vY2FyJztcbmltcG9ydCBJZG0gZnJvbSAnLi9pZG0nO1xuXG5cbnZhciBsb25nTW9kZWxPcHRpb25zID0ge1xuXHRhOiAxLjUsXG5cdGI6IDFcbn07XG5cbnZhciBsb25nTW9kZWwgPSBuZXcgSWRtKGxvbmdNb2RlbE9wdGlvbnMpO1xuXG52YXIgZmlyc3RDYXIgPSBuZXcgQ2FyKGxvbmdNb2RlbCk7XG52YXIgc2Vjb25kQ2FyID0gbmV3IENhcihsb25nTW9kZWwpO1xuIl19\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvaG9tZXBhZ2Uvc3JjL2pzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksZUFBZSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQUUsUUFBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDO0NBQUUsQ0FBQzs7QUFFOUYsSUFBSSxHQUFHLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOztBQUU1QyxJQUFJLEdBQUcsR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Ozs7O0FBSzVDLElBQUksZ0JBQWdCLEdBQUc7QUFDdEIsRUFBQyxFQUFFLEdBQUc7QUFDTixFQUFDLEVBQUUsQ0FBQztDQUNKLENBQUM7O0FBRUYsSUFBSSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbEMsSUFBSSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMiLCJmaWxlIjoiL1VzZXJzL3JhbHBoZ2VybS9qcy9ob21lcGFnZS9zcmMvanMvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlID0gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iajsgfTtcblxudmFyIENhciA9IF9pbnRlcm9wUmVxdWlyZShyZXF1aXJlKFwiLi9jYXJcIikpO1xuXG52YXIgSWRtID0gX2ludGVyb3BSZXF1aXJlKHJlcXVpcmUoXCIuL2lkbVwiKSk7XG5cblxuXG5cbnZhciBsb25nTW9kZWxPcHRpb25zID0ge1xuXHRhOiAxLjUsXG5cdGI6IDFcbn07XG5cbnZhciBsb25nTW9kZWwgPSBuZXcgSWRtKGxvbmdNb2RlbE9wdGlvbnMpO1xuXG52YXIgZmlyc3RDYXIgPSBuZXcgQ2FyKGxvbmdNb2RlbCk7XG52YXIgc2Vjb25kQ2FyID0gbmV3IENhcihsb25nTW9kZWwpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5eVlXeHdhR2RsY20wdmFuTXZhRzl0WlhCaFoyVXZjM0pqTDJwekwyMWhhVzR1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dEpRVUZQTEVkQlFVY3NNa0pCUVUwc1QwRkJUenM3U1VGRGFFSXNSMEZCUnl3eVFrRkJUU3hQUVVGUE96czdPenRCUVVkMlFpeEpRVUZKTEdkQ1FVRm5RaXhIUVVGSE8wRkJRM1JDTEVWQlFVTXNSVUZCUlN4SFFVRkhPMEZCUTA0c1JVRkJReXhGUVVGRkxFTkJRVU03UTBGRFNpeERRVUZET3p0QlFVVkdMRWxCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03TzBGQlJURkRMRWxCUVVrc1VVRkJVU3hIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTJ4RExFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRElpd2labWxzWlNJNklpOVZjMlZ5Y3k5eVlXeHdhR2RsY20wdmFuTXZhRzl0WlhCaFoyVXZjM0pqTDJwekwyMWhhVzR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1EyRnlJR1p5YjIwZ0p5NHZZMkZ5Snp0Y2JtbHRjRzl5ZENCSlpHMGdabkp2YlNBbkxpOXBaRzBuTzF4dVhHNWNiblpoY2lCc2IyNW5UVzlrWld4UGNIUnBiMjV6SUQwZ2UxeHVYSFJoT2lBeExqVXNYRzVjZEdJNklERmNibjA3WEc1Y2JuWmhjaUJzYjI1blRXOWtaV3dnUFNCdVpYY2dTV1J0S0d4dmJtZE5iMlJsYkU5d2RHbHZibk1wTzF4dVhHNTJZWElnWm1seWMzUkRZWElnUFNCdVpYY2dRMkZ5S0d4dmJtZE5iMlJsYkNrN1hHNTJZWElnYzJWamIyNWtRMkZ5SUQwZ2JtVjNJRU5oY2loc2IyNW5UVzlrWld3cE8xeHVJbDE5Il19\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYWxwaGdlcm0vanMvaG9tZXBhZ2Uvc3JjL2pzL21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOztBQUViLElBQUksZUFBZSxHQUFHLFVBQVUsR0FBRyxFQUFFO0FBQ3BDLFFBQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztDQUNwRCxDQUFDOztBQUVGLElBQUksR0FBRyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzs7QUFFNUMsSUFBSSxHQUFHLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOzs7OztBQUs1QyxJQUFJLGdCQUFnQixHQUFHO0FBQ3RCLEVBQUMsRUFBRSxHQUFHO0FBQ04sRUFBQyxFQUFFLENBQUM7Q0FDSixDQUFDOztBQUVGLElBQUksU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0FBRTFDLElBQUksUUFBUSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2xDLElBQUksU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwiZmlsZSI6Ii9Vc2Vycy9yYWxwaGdlcm0vanMvaG9tZXBhZ2Uvc3JjL2pzL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZSA9IGZ1bmN0aW9uIChvYmopIHtcblx0cmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmo7XG59O1xuXG52YXIgQ2FyID0gX2ludGVyb3BSZXF1aXJlKHJlcXVpcmUoXCIuL2NhclwiKSk7XG5cbnZhciBJZG0gPSBfaW50ZXJvcFJlcXVpcmUocmVxdWlyZShcIi4vaWRtXCIpKTtcblxuXG5cblxudmFyIGxvbmdNb2RlbE9wdGlvbnMgPSB7XG5cdGE6IDEuNSxcblx0YjogMVxufTtcblxudmFyIGxvbmdNb2RlbCA9IG5ldyBJZG0obG9uZ01vZGVsT3B0aW9ucyk7XG5cbnZhciBmaXJzdENhciA9IG5ldyBDYXIobG9uZ01vZGVsKTtcbnZhciBzZWNvbmRDYXIgPSBuZXcgQ2FyKGxvbmdNb2RlbCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTl5WVd4d2FHZGxjbTB2YW5NdmFHOXRaWEJoWjJVdmMzSmpMMnB6TDIxaGFXNHVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0SlFVRlBMRWRCUVVjc01rSkJRVTBzVDBGQlR6czdTVUZEYUVJc1IwRkJSeXd5UWtGQlRTeFBRVUZQT3pzN096dEJRVWQyUWl4SlFVRkpMR2RDUVVGblFpeEhRVUZITzBGQlEzUkNMRVZCUVVNc1JVRkJSU3hIUVVGSE8wRkJRMDRzUlVGQlF5eEZRVUZGTEVOQlFVTTdRMEZEU2l4RFFVRkRPenRCUVVWR0xFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPMEZCUlRGRExFbEJRVWtzVVVGQlVTeEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRMnhETEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZESWl3aVptbHNaU0k2SWk5VmMyVnljeTl5WVd4d2FHZGxjbTB2YW5NdmFHOXRaWEJoWjJVdmMzSmpMMnB6TDIxaGFXNHVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUTJGeUlHWnliMjBnSnk0dlkyRnlKenRjYm1sdGNHOXlkQ0JKWkcwZ1puSnZiU0FuTGk5cFpHMG5PMXh1WEc1Y2JuWmhjaUJzYjI1blRXOWtaV3hQY0hScGIyNXpJRDBnZTF4dVhIUmhPaUF4TGpVc1hHNWNkR0k2SURGY2JuMDdYRzVjYm5aaGNpQnNiMjVuVFc5a1pXd2dQU0J1WlhjZ1NXUnRLR3h2Ym1kTmIyUmxiRTl3ZEdsdmJuTXBPMXh1WEc1MllYSWdabWx5YzNSRFlYSWdQU0J1WlhjZ1EyRnlLR3h2Ym1kTmIyUmxiQ2s3WEc1MllYSWdjMlZqYjI1a1EyRnlJRDBnYm1WM0lFTmhjaWhzYjI1blRXOWtaV3dwTzF4dUlsMTlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OXlZV3h3YUdkbGNtMHZhbk12YUc5dFpYQmhaMlV2YzNKakwycHpMMjFoYVc0dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzV1VGQldTeERRVUZET3p0QlFVVmlMRWxCUVVrc1pVRkJaU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTzBGQlFVVXNVVUZCVHl4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExGVkJRVlVzUjBGQlJ5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRE8wTkJRVVVzUTBGQlF6czdRVUZGT1VZc1NVRkJTU3hIUVVGSExFZEJRVWNzWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE96dEJRVVUxUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN096czdPMEZCU3pWRExFbEJRVWtzWjBKQlFXZENMRWRCUVVjN1FVRkRkRUlzUlVGQlF5eEZRVUZGTEVkQlFVYzdRVUZEVGl4RlFVRkRMRVZCUVVVc1EwRkJRenREUVVOS0xFTkJRVU03TzBGQlJVWXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenM3UVVGRk1VTXNTVUZCU1N4UlFVRlJMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEYkVNc1NVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNaUxDSm1hV3hsSWpvaUwxVnpaWEp6TDNKaGJIQm9aMlZ5YlM5cWN5OW9iMjFsY0dGblpTOXpjbU12YW5NdmJXRnBiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNTJZWElnWDJsdWRHVnliM0JTWlhGMWFYSmxJRDBnWm5WdVkzUnBiMjRnS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFXMXdpWkdWbVlYVnNkRndpWFNBNklHOWlhanNnZlR0Y2JseHVkbUZ5SUVOaGNpQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpTaHlaWEYxYVhKbEtGd2lMaTlqWVhKY0lpa3BPMXh1WEc1MllYSWdTV1J0SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsS0hKbGNYVnBjbVVvWENJdUwybGtiVndpS1NrN1hHNWNibHh1WEc1Y2JuWmhjaUJzYjI1blRXOWtaV3hQY0hScGIyNXpJRDBnZTF4dVhIUmhPaUF4TGpVc1hHNWNkR0k2SURGY2JuMDdYRzVjYm5aaGNpQnNiMjVuVFc5a1pXd2dQU0J1WlhjZ1NXUnRLR3h2Ym1kTmIyUmxiRTl3ZEdsdmJuTXBPMXh1WEc1MllYSWdabWx5YzNSRFlYSWdQU0J1WlhjZ1EyRnlLR3h2Ym1kTmIyUmxiQ2s3WEc1MllYSWdjMlZqYjI1a1EyRnlJRDBnYm1WM0lFTmhjaWhzYjI1blRXOWtaV3dwTzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlaR0YwWVRwaGNIQnNhV05oZEdsdmJpOXFjMjl1TzJKaGMyVTJOQ3hsZVVveVdsaEtlbUZYT1hWSmFtOTZURU5LZW1JelZubFpNbFo2U1dwd1lrbHBPVlpqTWxaNVkzazVlVmxYZUhkaFIyUnNZMjB3ZG1GdVRYWmhSemwwV2xoQ2FGb3lWWFpqTTBwcVRESndla3d5TVdoaFZ6UjFZVzVOYVZoVGQybGliVVowV2xoTmFVOXNkR1JNUTBwMFdWaENkMkZYTlc1amVVazJTV3B6TjA5NmRFcFJWVVpRVEVWa1FsRlZZM05OYTBwQ1VWVXdjMVF3UmtKVWVuTTNVMVZHUkdGRlNYTlNNRVpDVW5sM2VWRnJSa0pVVTNoUVVWVkdVRTk2Y3pkUGVuUkNVVlZrTWxGcGVFcFJWVVpLVEVka1ExRlZSbTVSYVhoSVVWVkdTRTh3UmtKUk0xSkRURVZXUWxGVlRYTlNWVVpDVWxONFNGRlZSa2hQTUVaQ1VUQTBjMUpWUmtKUmVYaEdVVlZHUmt4RlRrSlJWVTAzVVRCR1JGTnBlRVJSVlVaRVQzcDBRbEZWVmtkTVJXeENVVlZyYzFVd1JrSlZlWGhJVVZWR1NFeEZiRUpSVld0elVqQkdRbEo1ZUVSUlZVWkVURWRrUTFGVlJtNVJhWGhFVVZWR1JFeEZUa0pSVlUwM1R6QkdRbEpVUmtSTVJXeENVVlZyYzFWVlJrSlZVM2hJVVZWR1NFeEZiRUpSVld0elVqQkdRbEo1ZUVSUlZVWkVURVpPUWxGV1RYTlJNRVpDVVhsNFJGRlZSa1JQTUVaQ1VUSjRSRXhGYkVKUlZXdHpWVEJHUWxWNWVFaFJWVVpJVEVWc1FsRlZhM05TTUVaQ1VubDRSRkZWUmtSTVJrNUNVVlpOYzFFd1JrSlJlWGhFVVZWR1JFbHBkMmxhYld4eldsTkpOa2xwT1Zaak1sWjVZM2s1ZVZsWGVIZGhSMlJzWTIwd2RtRnVUWFpoUnpsMFdsaENhRm95Vlhaak0wcHFUREp3ZWt3eU1XaGhWelIxWVc1TmFVeERTbnBpTTFaNVdUSldlbEV5T1hWa1IxWjFaRU5KTmxkNVNuQmlXRUoyWTI1UloxRXlSbmxKUjFwNVlqSXdaMHA1TkhaWk1rWjVTbnAwWTJKdGJIUmpSemw1WkVOQ1NscEhNR2RhYmtwMllsTkJia3hwT1hCYVJ6QnVUekY0ZFZoSE5XTmlibHBvWTJsQ2MySXlOVzVVVnpscldsZDRVR05JVW5CaU1qVjZTVVF3WjJVeGVIVllTRkpvVDJsQmVFeHFWWE5ZUnpWalpFZEpOa2xFUm1OaWJqQTNXRWMxWTJKdVdtaGphVUp6WWpJMWJsUlhPV3RhVjNkblVGTkNkVnBZWTJkVFYxSjBTMGQ0ZG1KdFpFNWlNbEpzWWtVNWQyUkhiSFppYmsxd1R6RjRkVmhITlRKWldFbG5XbTFzZVdNelVrUlpXRWxuVUZOQ2RWcFlZMmRSTWtaNVMwZDRkbUp0WkU1aU1sSnNZa05yTjFoSE5USlpXRWxuWXpKV2FtSXlOV3RSTWtaNVNVUXdaMkp0VmpOSlJVNW9ZMmxvYzJJeU5XNVVWemxyV2xkM2NFOHhlSFZKYkRFNUlsMTkiXX0=\n//# sourceMappingURL=data:application/json;base64,\n//# sourceMappingURL=data:application/json;base64,","export default class Car {\n\n\tconstructor(longModel) {\n\t\tthis.longModel = longModel;\n\t\tconsole.log('New Car with: ', longModel);\n\t}\n\n}\n","export default class Idm {\n\n  constructor(options) {\n    this.a = options.a || 1;\n    this.b = options.b || 1;\n\n    console.log('a: ', this.a);\n  }\n\n}\n"]}